import Head from 'next/head'
import SidebarMessage from '@/components/ChatPage/SidebarMessage/SidebarMessage'
import Layout from '@/components/Layout'
import { ReactElement } from 'react'
import type { NextPageWithLayout } from '../_app';
import ChatScreen from '@/components/ChatPage/ChatScreen/ChatScreen'
import { db } from '@/firebase'
import useChatMessage from '@/hooks/useChat';
import { GetStaticProps } from 'next';
import { getDataHooksProps } from 'next-data-hooks';

// import '@/styles/tailwind.min.css'
const Page: any = () => {

  const { chat, messages } = useChatMessage();

  return (
    <>
      <Head>
        <title>Chatapp 2.0</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* ChatScreen */}

        <div className="main flex-1 flex flex-col">
            <div className="hidden lg:block heading flex-2">
                <h1 className="text-3xl text-gray-700 mb-4">Chat</h1>
            </div>

            <div className="flex-1 flex h-full">
                <SidebarMessage />
                <ChatScreen chat={chat} messages={messages}/>
            </div>
        </div>

    </>
  )
}
 
Page.getLayout = function getLayout(page: ReactElement) {
  return (
    <Layout>
      {page}
    </Layout>
  );
};

Page.dataHooks = [
  useChatMessage
]

export default Page;

// export async function getStaticProps({ params }: any) {
//     const ref = db.collection('chats').doc(params.id);
//     const messagesRes = await ref.collection('messages').orderBy('timestamp', 'asc').get();
//     const messages = messagesRes.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//     }))
//     .map((messages: any) => ({
//         ...messages,
//         timestamp: messages.timestamp.toDate().getTime(),
//     }));

//     const chatRes = await ref.get();
//     const chat = {
//         id: chatRes.id,
//         ...chatRes.data()
//     };

//     return {
//         props: {
//             messages: JSON.stringify(messages),
//             chat: chat
//         }
//     }
// }

export const getStaticProps: GetStaticProps = async (context) => {
  const dataHooksProps = await getDataHooksProps({
    context,
    // this is an array of all data hooks from the `dataHooks` static prop.
    //                             ðŸ‘‡ðŸ‘‡ðŸ‘‡
    dataHooks: Page.dataHooks,
  });

  return {
    props: {
      // spread the props required by next-data-hooks
      ...dataHooksProps,

      // add additional props to Next.js here
    },
  };
};

export async function getStaticPaths(){

  const chatDoc = await db.collection("chats").get();

  const paths = chatDoc?.docs?.map((chat) => ({
    params: { id: chat.id.toString() },
  }))

  return {
      paths,
      fallback: false //indicates the type of fallback
  }
}
